/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.alidron.mdns;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.Enumeration;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.alidron.mdns//mDNSExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "mDNSExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.alidron.mdns.mDNSExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_mDNSExplorerAction",
        preferredID = "mDNSExplorerTopComponent"
)
@Messages({
    "CTL_mDNSExplorerAction=mDNS Explorer",
    "CTL_mDNSExplorerTopComponent=mDNS Explorer",
    "HINT_mDNSExplorerTopComponent=This is a mDNS explorer"
})
public final class mDNSExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private final ExplorerManager manager = new ExplorerManager();

    public mDNSExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_mDNSExplorerTopComponent());
        setToolTipText(Bundle.HINT_mDNSExplorerTopComponent());

        setLayout(new BorderLayout());
        add(new BeanTreeView(), BorderLayout.CENTER);
        
        try {
            this.manager.setRootContext(new MDnsRootNode());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        ActionMap map = getActionMap();
        
        associateLookup(new ProxyLookup(
                ExplorerUtils.createLookup(this.manager, map),
                Lookups.singleton(this))); // To allow access to expandNode()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.manager;
    }
}
