/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.shapesample;

import java.awt.BorderLayout;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.vmd.VMDGraphScene;
import org.netbeans.api.visual.vmd.VMDNodeWidget;
import org.netbeans.api.visual.widget.ComponentWidget;
import org.netbeans.shapesample.jfx.LineChartJFXPanel;
import org.netbeans.shapesample.jfx.SwingInterop;
import org.netbeans.shapesample.palette.PaletteSupport;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.netbeans.shapesample//Shape//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ShapeTopComponent",
        iconBase="org/alidron/ribbon/resources/Edit.png", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbeans.shapesample.ShapeTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@ActionReferences({
    @ActionReference(path = "Ribbon/AppMenu", position = 1000),
    @ActionReference(path = "Ribbon/TaskPanes/Home/View", position = 1000)
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ShapeAction",
        preferredID = "ShapeTopComponent"
)
@Messages({
    "CTL_ShapeAction=Shape",
    "CTL_ShapeTopComponent=Shape Window",
    "HINT_ShapeTopComponent=This is a Shape window"
})
public final class ShapeTopComponent extends TopComponent {

    public ShapeTopComponent() {
        initComponents();
        setName(Bundle.CTL_ShapeTopComponent());
        setToolTipText(Bundle.HINT_ShapeTopComponent());

        setLayout(new BorderLayout());
        //GraphSceneImpl scene = new GraphSceneImpl();
        VMDGraphScene scene = new VMDGraphScene();
        JScrollPane shapePane = new JScrollPane();
        shapePane.setViewportView(scene.createView());
        add(shapePane, BorderLayout.CENTER);
        add(scene.createSatelliteView(), BorderLayout.WEST);
        
        //LineChartJFXPanel lineChartPanel = new LineChartJFXPanel();
        SwingInterop lineChartPanel = new SwingInterop();
        VMDNodeWidget widget = (VMDNodeWidget) scene.addNode("JavaFX Chart");
        ComponentWidget componentWidget = new ComponentWidget(scene, lineChartPanel);
        widget.addChild(componentWidget);
        
        //scene.getSceneAnimator().animatePreferredLocation(widget, getMousePosition(true));
        scene.validate();
        
        associateLookup(Lookups.singleton(PaletteSupport.createPalette()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
